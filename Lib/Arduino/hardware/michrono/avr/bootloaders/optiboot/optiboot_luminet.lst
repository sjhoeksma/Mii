
optiboot_luminet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000270  00001d00  00001d00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00001efe  00001efe  000002e4  2**0
                  CONTENTS, READONLY
  2 .data         00000000  00800060  00001f70  000002e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000028  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002c1  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000168  00000000  00000000  000005cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001a9  00000000  00000000  00000737  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000009c  00000000  00000000  000008e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000151  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002f0  00000000  00000000  00000acd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00000dbd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00001d00 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    1d00:	11 24       	eor	r1, r1
#ifdef __AVR_ATmega8__
  SP=RAMEND;  // This is done by hardware reset
#endif

  // Adaboot no-wait mod
  ch = MCUSR;
    1d02:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    1d04:	14 be       	out	0x34, r1	; 52
  if (!(ch & _BV(EXTRF))) appStart();
    1d06:	81 ff       	sbrs	r24, 1
    1d08:	2e d1       	rcall	.+604    	; 0x1f66 <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    1d0a:	85 e0       	ldi	r24, 0x05	; 5
    1d0c:	8e bd       	out	0x2e, r24	; 46
  UBRR0L = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#endif
#endif

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);
    1d0e:	8e e0       	ldi	r24, 0x0E	; 14
    1d10:	16 d1       	rcall	.+556    	; 0x1f3e <watchdogConfig>

  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    1d12:	d4 9a       	sbi	0x1a, 4	; 26

#ifdef SOFT_UART
  /* Set TX pin as output */
  UART_DDR |= _BV(UART_TX_BIT);
    1d14:	d2 9a       	sbi	0x1a, 2	; 26
    1d16:	26 e0       	ldi	r18, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    1d18:	83 ec       	ldi	r24, 0xC3	; 195
    1d1a:	9f ef       	ldi	r25, 0xFF	; 255
    TIFR1 = _BV(TOV1);
    1d1c:	31 e0       	ldi	r19, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    1d1e:	9d bd       	out	0x2d, r25	; 45
    1d20:	8c bd       	out	0x2c, r24	; 44
    TIFR1 = _BV(TOV1);
    1d22:	3b b9       	out	0x0b, r19	; 11
    while(!(TIFR1 & _BV(TOV1)));
    1d24:	58 9b       	sbis	0x0b, 0	; 11
    1d26:	fe cf       	rjmp	.-4      	; 0x1d24 <main+0x24>
#ifdef __AVR_ATmega8__
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    1d28:	cc 9a       	sbi	0x19, 4	; 25
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1d2a:	a8 95       	wdr
    1d2c:	21 50       	subi	r18, 0x01	; 1
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    1d2e:	b9 f7       	brne	.-18     	; 0x1d1e <main+0x1e>
    1d30:	00 e0       	ldi	r16, 0x00	; 0
    1d32:	10 e0       	ldi	r17, 0x00	; 0
      do *bufPtr++ = getch();
      while (--length);

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    1d34:	b3 e0       	ldi	r27, 0x03	; 3
    1d36:	fb 2e       	mov	r15, r27
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    1d38:	ee 24       	eor	r14, r14
    1d3a:	e3 94       	inc	r14
        addrPtr += 2;
      } while (--ch);

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    1d3c:	85 e0       	ldi	r24, 0x05	; 5
    1d3e:	d8 2e       	mov	r13, r24
        vect -= 4; // Instruction is a relative jump (rjmp), so recalculate.
        buff[8] = vect & 0xff;
        buff[9] = vect >> 8;

        // Add jump to bootloader at RESET vector
        buff[0] = 0x7f;
    1d40:	9f e7       	ldi	r25, 0x7F	; 127
    1d42:	c9 2e       	mov	r12, r25
        buff[1] = 0xce; // rjmp 0x1d00 instruction
    1d44:	2e ec       	ldi	r18, 0xCE	; 206
    1d46:	b2 2e       	mov	r11, r18
#endif

  /* Forever loop */
  for (;;) {
    /* get character from UART */
    ch = getch();
    1d48:	e7 d0       	rcall	.+462    	; 0x1f18 <getch>

    if(ch == STK_GET_PARAMETER) {
    1d4a:	81 34       	cpi	r24, 0x41	; 65
    1d4c:	89 f4       	brne	.+34     	; 0x1d70 <main+0x70>
      unsigned char which = getch();
    1d4e:	e4 d0       	rcall	.+456    	; 0x1f18 <getch>
      verifySpace();
    1d50:	89 83       	std	Y+1, r24	; 0x01
    1d52:	f9 d0       	rcall	.+498    	; 0x1f46 <verifySpace>
      if (which == 0x82) {
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	82 38       	cpi	r24, 0x82	; 130
    1d58:	19 f4       	brne	.+6      	; 0x1d60 <main+0x60>
	/*
	 * Send optiboot version as "minor SW version"
	 */
	putch(OPTIBOOT_MINVER);
    1d5a:	84 e0       	ldi	r24, 0x04	; 4
    1d5c:	ce d0       	rcall	.+412    	; 0x1efa <putch>
    1d5e:	ca c0       	rjmp	.+404    	; 0x1ef4 <main+0x1f4>
      } else if (which == 0x81) {
    1d60:	81 38       	cpi	r24, 0x81	; 129
    1d62:	19 f4       	brne	.+6      	; 0x1d6a <main+0x6a>
	  putch(OPTIBOOT_MAJVER);
    1d64:	84 e0       	ldi	r24, 0x04	; 4
    1d66:	c9 d0       	rcall	.+402    	; 0x1efa <putch>
    1d68:	c5 c0       	rjmp	.+394    	; 0x1ef4 <main+0x1f4>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    1d6a:	83 e0       	ldi	r24, 0x03	; 3
    1d6c:	c6 d0       	rcall	.+396    	; 0x1efa <putch>
    1d6e:	c2 c0       	rjmp	.+388    	; 0x1ef4 <main+0x1f4>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    1d70:	82 34       	cpi	r24, 0x42	; 66
    1d72:	19 f4       	brne	.+6      	; 0x1d7a <main+0x7a>
      // SET DEVICE is ignored
      getNch(20);
    1d74:	84 e1       	ldi	r24, 0x14	; 20
    1d76:	ef d0       	rcall	.+478    	; 0x1f56 <getNch>
    1d78:	bd c0       	rjmp	.+378    	; 0x1ef4 <main+0x1f4>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    1d7a:	85 34       	cpi	r24, 0x45	; 69
    1d7c:	19 f4       	brne	.+6      	; 0x1d84 <main+0x84>
      // SET DEVICE EXT is ignored
      getNch(5);
    1d7e:	85 e0       	ldi	r24, 0x05	; 5
    1d80:	ea d0       	rcall	.+468    	; 0x1f56 <getNch>
    1d82:	b8 c0       	rjmp	.+368    	; 0x1ef4 <main+0x1f4>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    1d84:	85 35       	cpi	r24, 0x55	; 85
    1d86:	71 f4       	brne	.+28     	; 0x1da4 <main+0xa4>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    1d88:	c7 d0       	rcall	.+398    	; 0x1f18 <getch>
    1d8a:	68 2e       	mov	r6, r24
    1d8c:	77 24       	eor	r7, r7
      newAddress = (newAddress & 0xff) | (getch() << 8);
    1d8e:	c4 d0       	rcall	.+392    	; 0x1f18 <getch>
    1d90:	08 2f       	mov	r16, r24
    1d92:	10 e0       	ldi	r17, 0x00	; 0
    1d94:	10 2f       	mov	r17, r16
    1d96:	00 27       	eor	r16, r16
    1d98:	06 29       	or	r16, r6
    1d9a:	17 29       	or	r17, r7
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    1d9c:	00 0f       	add	r16, r16
    1d9e:	11 1f       	adc	r17, r17
      address = newAddress;
      verifySpace();
    1da0:	d2 d0       	rcall	.+420    	; 0x1f46 <verifySpace>
    1da2:	a8 c0       	rjmp	.+336    	; 0x1ef4 <main+0x1f4>
    }
    else if(ch == STK_UNIVERSAL) {
    1da4:	86 35       	cpi	r24, 0x56	; 86
    1da6:	29 f4       	brne	.+10     	; 0x1db2 <main+0xb2>
      // UNIVERSAL command is ignored
      getNch(4);
    1da8:	84 e0       	ldi	r24, 0x04	; 4
    1daa:	d5 d0       	rcall	.+426    	; 0x1f56 <getNch>
      putch(0x00);
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	a5 d0       	rcall	.+330    	; 0x1efa <putch>
    1db0:	a1 c0       	rjmp	.+322    	; 0x1ef4 <main+0x1f4>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    1db2:	84 36       	cpi	r24, 0x64	; 100
    1db4:	09 f0       	breq	.+2      	; 0x1db8 <main+0xb8>
    1db6:	5b c0       	rjmp	.+182    	; 0x1e6e <main+0x16e>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t *bufPtr;
      uint16_t addrPtr;

      getch();			/* getlen() */
    1db8:	af d0       	rcall	.+350    	; 0x1f18 <getch>
      length = getch();
    1dba:	ae d0       	rcall	.+348    	; 0x1f18 <getch>
    1dbc:	a8 2e       	mov	r10, r24
      getch();
    1dbe:	ac d0       	rcall	.+344    	; 0x1f18 <getch>

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);

      // While that is going on, read in page contents
      bufPtr = buff;
    1dc0:	61 2c       	mov	r6, r1
    1dc2:	e1 e0       	ldi	r30, 0x01	; 1
    1dc4:	7e 2e       	mov	r7, r30
      do *bufPtr++ = getch();
    1dc6:	a8 d0       	rcall	.+336    	; 0x1f18 <getch>
    1dc8:	f3 01       	movw	r30, r6
    1dca:	81 93       	st	Z+, r24
    1dcc:	3f 01       	movw	r6, r30
      while (--length);
    1dce:	ae 16       	cp	r10, r30
    1dd0:	d1 f7       	brne	.-12     	; 0x1dc6 <main+0xc6>

      // If we are in NRWW section, page erase has to be delayed until now.
      // Todo: Take RAMPZ into account
      if (address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);
    1dd2:	f8 01       	movw	r30, r16
    1dd4:	f7 be       	out	0x37, r15	; 55
    1dd6:	e8 95       	spm

      // Read command terminator, start reply
      verifySpace();
    1dd8:	b6 d0       	rcall	.+364    	; 0x1f46 <verifySpace>

      // If only a partial page is to be programmed, the erase might not be complete.
      // So check that here
      boot_spm_busy_wait();
    1dda:	07 b6       	in	r0, 0x37	; 55
    1ddc:	00 fc       	sbrc	r0, 0
    1dde:	fd cf       	rjmp	.-6      	; 0x1dda <main+0xda>

#ifdef VIRTUAL_BOOT_PARTITION
      if ((uint16_t)(void*)address == 0) {
    1de0:	01 15       	cp	r16, r1
    1de2:	11 05       	cpc	r17, r1
    1de4:	31 f5       	brne	.+76     	; 0x1e32 <main+0x132>
        // This is the reset vector page. We need to live-patch the code so the
        // bootloader runs.
        //
        // Move RESET vector to WDT vector
        uint16_t vect = buff[0] | (buff[1]<<8);
    1de6:	40 91 01 01 	lds	r20, 0x0101
    1dea:	50 e0       	ldi	r21, 0x00	; 0
    1dec:	54 2f       	mov	r21, r20
    1dee:	44 27       	eor	r20, r20
    1df0:	80 91 00 01 	lds	r24, 0x0100
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	48 2b       	or	r20, r24
    1df8:	59 2b       	or	r21, r25
        rstVect = vect;
    1dfa:	50 93 85 01 	sts	0x0185, r21
    1dfe:	40 93 84 01 	sts	0x0184, r20
        wdtVect = buff[8] | (buff[9]<<8);
    1e02:	80 91 09 01 	lds	r24, 0x0109
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	98 2f       	mov	r25, r24
    1e0a:	88 27       	eor	r24, r24
    1e0c:	20 91 08 01 	lds	r18, 0x0108
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	82 2b       	or	r24, r18
    1e14:	93 2b       	or	r25, r19
    1e16:	90 93 87 01 	sts	0x0187, r25
    1e1a:	80 93 86 01 	sts	0x0186, r24
        vect -= 4; // Instruction is a relative jump (rjmp), so recalculate.
    1e1e:	44 50       	subi	r20, 0x04	; 4
    1e20:	50 40       	sbci	r21, 0x00	; 0
        buff[8] = vect & 0xff;
    1e22:	40 93 08 01 	sts	0x0108, r20
        buff[9] = vect >> 8;
    1e26:	50 93 09 01 	sts	0x0109, r21

        // Add jump to bootloader at RESET vector
        buff[0] = 0x7f;
    1e2a:	c0 92 00 01 	sts	0x0100, r12
        buff[1] = 0xce; // rjmp 0x1d00 instruction
    1e2e:	b0 92 01 01 	sts	0x0101, r11

      // If we are in RWW section, immediately start page erase
      if (address < NRWWSTART) __boot_page_erase_short((uint16_t)(void*)address);

      // While that is going on, read in page contents
      bufPtr = buff;
    1e32:	f8 01       	movw	r30, r16
        buff[1] = 0xce; // rjmp 0x1d00 instruction
      }
#endif

      // Copy buffer into programming buffer
      bufPtr = buff;
    1e34:	a0 e0       	ldi	r26, 0x00	; 0
    1e36:	b1 e0       	ldi	r27, 0x01	; 1
      addrPtr = (uint16_t)(void*)address;
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
    1e38:	2c 91       	ld	r18, X
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
        a |= (*bufPtr++) << 8;
    1e3c:	11 96       	adiw	r26, 0x01	; 1
    1e3e:	8c 91       	ld	r24, X
    1e40:	11 97       	sbiw	r26, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	98 2f       	mov	r25, r24
    1e46:	88 27       	eor	r24, r24
    1e48:	82 2b       	or	r24, r18
    1e4a:	93 2b       	or	r25, r19
#define rstVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+4))
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif

/* main program starts here */
int main(void) {
    1e4c:	12 96       	adiw	r26, 0x02	; 2
      ch = SPM_PAGESIZE / 2;
      do {
        uint16_t a;
        a = *bufPtr++;
        a |= (*bufPtr++) << 8;
        __boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    1e4e:	0c 01       	movw	r0, r24
    1e50:	e7 be       	out	0x37, r14	; 55
    1e52:	e8 95       	spm
    1e54:	11 24       	eor	r1, r1
        addrPtr += 2;
    1e56:	32 96       	adiw	r30, 0x02	; 2
      } while (--ch);
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	a0 34       	cpi	r26, 0x40	; 64
    1e5c:	b8 07       	cpc	r27, r24
    1e5e:	61 f7       	brne	.-40     	; 0x1e38 <main+0x138>

      // Write from programming buffer
      __boot_page_write_short((uint16_t)(void*)address);
    1e60:	f8 01       	movw	r30, r16
    1e62:	d7 be       	out	0x37, r13	; 55
    1e64:	e8 95       	spm
      boot_spm_busy_wait();
    1e66:	07 b6       	in	r0, 0x37	; 55
    1e68:	00 fc       	sbrc	r0, 0
    1e6a:	fd cf       	rjmp	.-6      	; 0x1e66 <main+0x166>
    1e6c:	43 c0       	rjmp	.+134    	; 0x1ef4 <main+0x1f4>
      boot_rww_enable();
#endif

    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    1e6e:	84 37       	cpi	r24, 0x74	; 116
    1e70:	81 f5       	brne	.+96     	; 0x1ed2 <main+0x1d2>
      // READ PAGE - we only read flash
      getch();			/* getlen() */
    1e72:	52 d0       	rcall	.+164    	; 0x1f18 <getch>
      length = getch();
    1e74:	51 d0       	rcall	.+162    	; 0x1f18 <getch>
    1e76:	98 2e       	mov	r9, r24
      getch();
    1e78:	4f d0       	rcall	.+158    	; 0x1f18 <getch>

      verifySpace();
    1e7a:	65 d0       	rcall	.+202    	; 0x1f46 <verifySpace>
    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
      // READ PAGE - we only read flash
      getch();			/* getlen() */
      length = getch();
    1e7c:	a9 2c       	mov	r10, r9
      getch();

      verifySpace();
    1e7e:	38 01       	movw	r6, r16
#ifdef VIRTUAL_BOOT_PARTITION
      do {
        // Undo vector patch in bottom page so verify passes
        if (address == 0)       ch=rstVect & 0xff;
    1e80:	61 14       	cp	r6, r1
    1e82:	71 04       	cpc	r7, r1
    1e84:	19 f4       	brne	.+6      	; 0x1e8c <main+0x18c>
    1e86:	80 91 84 01 	lds	r24, 0x0184
    1e8a:	17 c0       	rjmp	.+46     	; 0x1eba <main+0x1ba>
        else if (address == 1)  ch=rstVect >> 8;
    1e8c:	f1 e0       	ldi	r31, 0x01	; 1
    1e8e:	6f 16       	cp	r6, r31
    1e90:	71 04       	cpc	r7, r1
    1e92:	19 f4       	brne	.+6      	; 0x1e9a <main+0x19a>
    1e94:	80 91 85 01 	lds	r24, 0x0185
    1e98:	10 c0       	rjmp	.+32     	; 0x1eba <main+0x1ba>
        else if (address == 8)  ch=wdtVect & 0xff;
    1e9a:	88 e0       	ldi	r24, 0x08	; 8
    1e9c:	68 16       	cp	r6, r24
    1e9e:	71 04       	cpc	r7, r1
    1ea0:	19 f4       	brne	.+6      	; 0x1ea8 <main+0x1a8>
    1ea2:	80 91 86 01 	lds	r24, 0x0186
    1ea6:	09 c0       	rjmp	.+18     	; 0x1eba <main+0x1ba>
        else if (address == 9) ch=wdtVect >> 8;
    1ea8:	e9 e0       	ldi	r30, 0x09	; 9
    1eaa:	6e 16       	cp	r6, r30
    1eac:	71 04       	cpc	r7, r1
    1eae:	19 f4       	brne	.+6      	; 0x1eb6 <main+0x1b6>
    1eb0:	80 91 87 01 	lds	r24, 0x0187
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <main+0x1ba>
        else ch = pgm_read_byte_near(address);
    1eb6:	f3 01       	movw	r30, r6
    1eb8:	84 91       	lpm	r24, Z
        address++;
    1eba:	08 94       	sec
    1ebc:	61 1c       	adc	r6, r1
    1ebe:	71 1c       	adc	r7, r1
        putch(ch);
    1ec0:	1c d0       	rcall	.+56     	; 0x1efa <putch>
      } while (--length);
    1ec2:	aa 94       	dec	r10
    1ec4:	e9 f6       	brne	.-70     	; 0x1e80 <main+0x180>
#define rstVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+4))
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif

/* main program starts here */
int main(void) {
    1ec6:	0f 5f       	subi	r16, 0xFF	; 255
    1ec8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eca:	9a 94       	dec	r9
    1ecc:	09 0d       	add	r16, r9
    1ece:	11 1d       	adc	r17, r1
    1ed0:	11 c0       	rjmp	.+34     	; 0x1ef4 <main+0x1f4>
#endif
#endif
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    1ed2:	85 37       	cpi	r24, 0x75	; 117
    1ed4:	41 f4       	brne	.+16     	; 0x1ee6 <main+0x1e6>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    1ed6:	37 d0       	rcall	.+110    	; 0x1f46 <verifySpace>
      putch(SIGNATURE_0);
    1ed8:	8e e1       	ldi	r24, 0x1E	; 30
    1eda:	0f d0       	rcall	.+30     	; 0x1efa <putch>
      putch(SIGNATURE_1);
    1edc:	83 e9       	ldi	r24, 0x93	; 147
    1ede:	0d d0       	rcall	.+26     	; 0x1efa <putch>
      putch(SIGNATURE_2);
    1ee0:	8c e0       	ldi	r24, 0x0C	; 12
    1ee2:	0b d0       	rcall	.+22     	; 0x1efa <putch>
    1ee4:	07 c0       	rjmp	.+14     	; 0x1ef4 <main+0x1f4>
    }
    else if (ch == 'Q') {
    1ee6:	81 35       	cpi	r24, 0x51	; 81
    1ee8:	21 f4       	brne	.+8      	; 0x1ef2 <main+0x1f2>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    1eea:	88 e0       	ldi	r24, 0x08	; 8
    1eec:	28 d0       	rcall	.+80     	; 0x1f3e <watchdogConfig>
      verifySpace();
    1eee:	2b d0       	rcall	.+86     	; 0x1f46 <verifySpace>
    1ef0:	01 c0       	rjmp	.+2      	; 0x1ef4 <main+0x1f4>
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    1ef2:	29 d0       	rcall	.+82     	; 0x1f46 <verifySpace>
    }
    putch(STK_OK);
    1ef4:	80 e1       	ldi	r24, 0x10	; 16
    1ef6:	01 d0       	rcall	.+2      	; 0x1efa <putch>
  }
    1ef8:	27 cf       	rjmp	.-434    	; 0x1d48 <main+0x48>

00001efa <putch>:
void putch(char ch) {
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
  UDR0 = ch;
#else
  __asm__ __volatile__ (
    1efa:	2a e0       	ldi	r18, 0x0A	; 10
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	80 95       	com	r24
    1f00:	08 94       	sec
    1f02:	10 f4       	brcc	.+4      	; 0x1f08 <optiboot_version+0xa>
    1f04:	da 98       	cbi	0x1b, 2	; 27
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <optiboot_version+0xe>
    1f08:	da 9a       	sbi	0x1b, 2	; 27
    1f0a:	00 00       	nop
    1f0c:	14 d0       	rcall	.+40     	; 0x1f36 <uartDelay>
    1f0e:	13 d0       	rcall	.+38     	; 0x1f36 <uartDelay>
    1f10:	86 95       	lsr	r24
    1f12:	2a 95       	dec	r18
    1f14:	b1 f7       	brne	.-20     	; 0x1f02 <optiboot_version+0x4>
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    1f16:	08 95       	ret

00001f18 <getch>:
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    1f18:	29 e0       	ldi	r18, 0x09	; 9
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	cb 99       	sbic	0x19, 3	; 25
    1f1e:	fe cf       	rjmp	.-4      	; 0x1f1c <getch+0x4>
    1f20:	0a d0       	rcall	.+20     	; 0x1f36 <uartDelay>
    1f22:	09 d0       	rcall	.+18     	; 0x1f36 <uartDelay>
    1f24:	08 d0       	rcall	.+16     	; 0x1f36 <uartDelay>
    1f26:	88 94       	clc
    1f28:	cb 99       	sbic	0x19, 3	; 25
    1f2a:	08 94       	sec
    1f2c:	2a 95       	dec	r18
    1f2e:	11 f0       	breq	.+4      	; 0x1f34 <getch+0x1c>
    1f30:	87 95       	ror	r24
    1f32:	f7 cf       	rjmp	.-18     	; 0x1f22 <getch+0xa>
    1f34:	08 95       	ret

00001f36 <uartDelay>:
#if UART_B_VALUE > 255
#error Baud rate too slow for soft UART
#endif

void uartDelay() {
  __asm__ __volatile__ (
    1f36:	9e e0       	ldi	r25, 0x0E	; 14
    1f38:	9a 95       	dec	r25
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <uartDelay+0x2>
    1f3c:	08 95       	ret

00001f3e <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1f3e:	98 e1       	ldi	r25, 0x18	; 24
    1f40:	91 bd       	out	0x21, r25	; 33
  WDTCSR = x;
    1f42:	81 bd       	out	0x21, r24	; 33
}
    1f44:	08 95       	ret

00001f46 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    1f46:	e8 df       	rcall	.-48     	; 0x1f18 <getch>
    1f48:	80 32       	cpi	r24, 0x20	; 32
    1f4a:	19 f0       	breq	.+6      	; 0x1f52 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    1f4c:	88 e0       	ldi	r24, 0x08	; 8
    1f4e:	f7 df       	rcall	.-18     	; 0x1f3e <watchdogConfig>
    1f50:	ff cf       	rjmp	.-2      	; 0x1f50 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    1f52:	84 e1       	ldi	r24, 0x14	; 20
    1f54:	d2 cf       	rjmp	.-92     	; 0x1efa <putch>

00001f56 <getNch>:
}
    1f56:	cf 93       	push	r28
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    1f58:	c8 2f       	mov	r28, r24
    1f5a:	de df       	rcall	.-68     	; 0x1f18 <getch>
  do getch(); while (--count);
    1f5c:	c1 50       	subi	r28, 0x01	; 1
    1f5e:	e9 f7       	brne	.-6      	; 0x1f5a <getNch+0x4>
    1f60:	f2 df       	rcall	.-28     	; 0x1f46 <verifySpace>
  verifySpace();
    1f62:	cf 91       	pop	r28
}
    1f64:	08 95       	ret

00001f66 <appStart>:
    1f66:	80 e0       	ldi	r24, 0x00	; 0
  WDTCSR = _BV(WDCE) | _BV(WDE);
  WDTCSR = x;
}

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
    1f68:	ea df       	rcall	.-44     	; 0x1f3e <watchdogConfig>
    1f6a:	e4 e0       	ldi	r30, 0x04	; 4
  __asm__ __volatile__ (
    1f6c:	ff 27       	eor	r31, r31
    1f6e:	09 94       	ijmp
